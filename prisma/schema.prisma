generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Vehicle {
  id            String           @id @default(uuid())
  model         String
  image         String?
  description   String
  pricePerDay   Int
  seats         Int
  range         String
  acceleration  String
  features      String[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  bookings      Booking[]
  specialPrices SpecialPricing[] @relation("SpecialPricingToVehicle")
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  name          String?
  phone         String?
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  bookings      Booking[]
  messages      Message[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Booking {
  id         String    @id @default(uuid())
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
  status     String    @default("pending")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  vehicleId  String
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  vehicle    Vehicle   @relation(fields: [vehicleId], references: [id])
  messages   Message[]
}

model Message {
  id             String   @id @default(uuid())
  content        String
  createdAt      DateTime @default(now())
  bookingId      String
  userId         String
  isAdminMessage Boolean  @default(false)
  isRead         Boolean  @default(false)
  booking        Booking  @relation(fields: [bookingId], references: [id])
  user           User     @relation(fields: [userId], references: [id])
}

model SpecialPricing {
  id         String    @id @default(uuid())
  name       String
  startDate  DateTime
  endDate    DateTime
  priceType  String
  priceValue Float
  applyToAll Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  vehicles   Vehicle[] @relation("SpecialPricingToVehicle")
}
